{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Z",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#chars"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#block_comment"
    },
    {
      "include": "#raw_strings"
    },
    {
      "comment": "Boolean constant",
      "name": "constant.language.boolean.z",
      "match": "\\b(true|false)\\b"
    },
    {
      "comment": "Constant",
      "name": "constant.language.z",
      "match": "\\b(undefined)\\b"
    },
    {
      "comment": "Built-in functions",
      "match": "\\b(to_json|from_json|print|printf|sprintf|format|len|copy|len|append|delete|splice|type_name|int|bool|float|char|bytes|error|string|time|is_string|is_bool|is_float|is_char|is_bytes|is_error|is_undefined|is_function|is_callable|is_array|is_immutable_array|is_map|is_iterable|is_time)\\b(?=\\()",
      "name": "support.function.builtin.z"
    },
    {
      "comment": "Comparison operator",
      "name": "keyword.operator.comparison.z",
      "match": "(&&|\\|\\||==|!=)"
    },
    {
      "comment": "Assignment operator",
      "name": "keyword.operator.assignment.z",
      "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|&^=|\\|=|<<=|>>=|=|:=|--|\\+\\+)"
    },
    {
      "comment": "Arithmetic operator",
      "name": "keyword.operator.arithmetic.z",
      "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>|&^)"
    },
    {
      "comment": "Comparison operator (second group because of regex precedence)",
      "name": "keyword.operator.comparison.z",
      "match": "(<=|>=|<|>)"
    },
    {
      "comment": "Function call",
      "match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.z"
        }
      }
    },
    {
      "comment": "Miscellaneous operator",
      "name": "keyword.operator.misc.z"
    },
    {
      "comment": "Numbers (decimal, hex, binary, octal) with underscore separators support",
      "name": "constant.numeric.z",
      "match": "\\b(0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*|0b[01]+(_[01]+)*|0o[0-7]+(_[0-7]+)*|\\d+(_\\d+)*\\.\\d+(_\\d+)*([eE][+-]?\\d+(_\\d+)*)?|\\d+(_\\d+)*[eE][+-]?\\d+(_\\d+)*|\\d+(_\\d+)*)\\b"
    },
    {
      "comment": "Variable identifier",
      "name": "variable.other.z",
      "match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\b(?!\\s*\\()"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.z",
          "match": "\\b(if|else|for|return|immutable|import|func|export|in)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.z",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.z",
          "match": "\\\\."
        }
      ]
    },
    "raw_strings": {
      "name": "string.quoted.double.z",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "constant.character.escape.z",
          "match": "\\\\."
        }
      ]
    },
    "chars": {
      "name": "string.quoted.simple.z",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.z",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "name": "comment.line.z",
      "begin": "//",
      "end": "\n"
    },
    "block_comment": {
      "comment": "Block comment",
      "name": "comment.block.z",
      "begin": "/\\*",
      "end": "\\*/"
    }
  },
  "scopeName": "source.z"
}